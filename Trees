/**
 * https://leetcode.com/problems/path-sum-iii/
 * You are given a binary tree in which each node contains an integer value.
 * Find the number of paths that sum to a given value.
 
 *This is brute force solution with O(n^2)
 * For every subtree, calculate the left and right sum and store in the tempSum
 * if tempSum is equal to target sum, add it to count
 * }
 */
class Solution {
    
    int count=0;
    int sum;
    public int pathSum(TreeNode root, int sum) {
        this.sum =sum;
        if(root!=null){
            sumForEveryRoot(root,0);
            pathSum(root.left,sum);
            pathSum(root.right,sum);
        }
        
        return count;
        
    }
    
    public void sumForEveryRoot(TreeNode node,int tempSum){
        
        if(node!=null){
            
            tempSum+=node.val;
            if(tempSum==sum) count++;
            sumForEveryRoot(node.left,tempSum);
            sumForEveryRoot(node.right,tempSum);
        }
    }
}
